/*
 * KSeF
 * Krajowy Systemu e-Faktur
 *
 * OpenAPI spec version: 0.0.2
 * Contact: info.ksef@mf.gov.pl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.alapierre.ksef.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * QueryCriteriaCredentialsPlainType
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-12-19T16:15:43.054535+01:00[Europe/Warsaw]")

public class QueryCriteriaCredentialsPlainType extends QueryCriteriaCredentialsType {
  /**
   * Gets or Sets selectorType
   */
  @JsonAdapter(SelectorTypeEnum.Adapter.class)
  public enum SelectorTypeEnum {
    ALL("all"),
    ID("id");

    private String value;

    SelectorTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SelectorTypeEnum fromValue(String input) {
      for (SelectorTypeEnum b : SelectorTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SelectorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SelectorTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SelectorTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SelectorTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("selectorType")
  private SelectorTypeEnum selectorType = null;

  /**
   * Gets or Sets queryCredentialsTypeResultType
   */
  @JsonAdapter(QueryCredentialsTypeResultTypeEnum.Adapter.class)
  public enum QueryCredentialsTypeResultTypeEnum {
    ALL("all"),
    DIRECT("direct"),
    INDIRECT("indirect");

    private String value;

    QueryCredentialsTypeResultTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static QueryCredentialsTypeResultTypeEnum fromValue(String input) {
      for (QueryCredentialsTypeResultTypeEnum b : QueryCredentialsTypeResultTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<QueryCredentialsTypeResultTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QueryCredentialsTypeResultTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public QueryCredentialsTypeResultTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return QueryCredentialsTypeResultTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("queryCredentialsTypeResultType")
  private QueryCredentialsTypeResultTypeEnum queryCredentialsTypeResultType = null;

  /**
   * Gets or Sets queryCredentialsScopeResultType
   */
  @JsonAdapter(QueryCredentialsScopeResultTypeEnum.Adapter.class)
  public enum QueryCredentialsScopeResultTypeEnum {
    CURRENT("current");

    private String value;

    QueryCredentialsScopeResultTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static QueryCredentialsScopeResultTypeEnum fromValue(String input) {
      for (QueryCredentialsScopeResultTypeEnum b : QueryCredentialsScopeResultTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<QueryCredentialsScopeResultTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QueryCredentialsScopeResultTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public QueryCredentialsScopeResultTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return QueryCredentialsScopeResultTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("queryCredentialsScopeResultType")
  private QueryCredentialsScopeResultTypeEnum queryCredentialsScopeResultType = null;

  public QueryCriteriaCredentialsPlainType() {
    this.selectorType = SelectorTypeEnum.valueOf(this.getClass().getSimpleName());
  }
  public QueryCriteriaCredentialsPlainType selectorType(SelectorTypeEnum selectorType) {
    this.selectorType = selectorType;
    return this;
  }

   /**
   * Get selectorType
   * @return selectorType
  **/
  @Schema(required = true, description = "")
  public SelectorTypeEnum getSelectorType() {
    return selectorType;
  }

  public void setSelectorType(SelectorTypeEnum selectorType) {
    this.selectorType = selectorType;
  }

  public QueryCriteriaCredentialsPlainType queryCredentialsTypeResultType(QueryCredentialsTypeResultTypeEnum queryCredentialsTypeResultType) {
    this.queryCredentialsTypeResultType = queryCredentialsTypeResultType;
    return this;
  }

   /**
   * Get queryCredentialsTypeResultType
   * @return queryCredentialsTypeResultType
  **/
  @Schema(required = true, description = "")
  public QueryCredentialsTypeResultTypeEnum getQueryCredentialsTypeResultType() {
    return queryCredentialsTypeResultType;
  }

  public void setQueryCredentialsTypeResultType(QueryCredentialsTypeResultTypeEnum queryCredentialsTypeResultType) {
    this.queryCredentialsTypeResultType = queryCredentialsTypeResultType;
  }

  public QueryCriteriaCredentialsPlainType queryCredentialsScopeResultType(QueryCredentialsScopeResultTypeEnum queryCredentialsScopeResultType) {
    this.queryCredentialsScopeResultType = queryCredentialsScopeResultType;
    return this;
  }

   /**
   * Get queryCredentialsScopeResultType
   * @return queryCredentialsScopeResultType
  **/
  @Schema(required = true, description = "")
  public QueryCredentialsScopeResultTypeEnum getQueryCredentialsScopeResultType() {
    return queryCredentialsScopeResultType;
  }

  public void setQueryCredentialsScopeResultType(QueryCredentialsScopeResultTypeEnum queryCredentialsScopeResultType) {
    this.queryCredentialsScopeResultType = queryCredentialsScopeResultType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryCriteriaCredentialsPlainType queryCriteriaCredentialsPlainType = (QueryCriteriaCredentialsPlainType) o;
    return Objects.equals(this.selectorType, queryCriteriaCredentialsPlainType.selectorType) &&
        Objects.equals(this.queryCredentialsTypeResultType, queryCriteriaCredentialsPlainType.queryCredentialsTypeResultType) &&
        Objects.equals(this.queryCredentialsScopeResultType, queryCriteriaCredentialsPlainType.queryCredentialsScopeResultType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(selectorType, queryCredentialsTypeResultType, queryCredentialsScopeResultType, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryCriteriaCredentialsPlainType {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    selectorType: ").append(toIndentedString(selectorType)).append("\n");
    sb.append("    queryCredentialsTypeResultType: ").append(toIndentedString(queryCredentialsTypeResultType)).append("\n");
    sb.append("    queryCredentialsScopeResultType: ").append(toIndentedString(queryCredentialsScopeResultType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
