/*
 * KSeF
 * Krajowy Systemu e-Faktur
 *
 * OpenAPI spec version: 0.0.2
 * Contact: info.ksef@mf.gov.pl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.alapierre.ksef.client.api;

import io.alapierre.ksef.client.ApiClient;
import io.alapierre.ksef.client.ApiException;
import io.alapierre.ksef.client.ApiResponse;
import io.alapierre.ksef.client.ProgressRequestBody;
import io.alapierre.ksef.client.model.GetPaymentIdentifierReferenceNumbersResponse;
import io.alapierre.ksef.client.model.RequestPaymentIdentifierRequest;
import io.alapierre.ksef.client.model.RequestPaymentIdentifierResponse;
import io.alapierre.ksef.client.ApiCallback;
import io.alapierre.ksef.client.Configuration;
import io.alapierre.ksef.client.Pair;
import io.alapierre.ksef.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InterfejsyInteraktywnePatnociApi {
    private ApiClient apiClient;

    public InterfejsyInteraktywnePatnociApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InterfejsyInteraktywnePatnociApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getPaymentIdentifierReferenceNumbers
     * @param paymentIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPaymentIdentifierReferenceNumbersCall(String paymentIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/online/Payment/Identifier/GetReferenceNumbers/{PaymentIdentifier}"
            .replaceAll("\\{" + "PaymentIdentifier" + "\\}", apiClient.escapeString(paymentIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SessionToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPaymentIdentifierReferenceNumbersValidateBeforeCall(String paymentIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'paymentIdentifier' is set
        if (paymentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'paymentIdentifier' when calling getPaymentIdentifierReferenceNumbers(Async)");
        }

        com.squareup.okhttp.Call call = getPaymentIdentifierReferenceNumbersCall(paymentIdentifier, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Pobranie listy faktur dla identyfikatora płatności
     * Pobranie listy faktur dla identyfikatora płatności
     * @param paymentIdentifier  (required)
     * @return GetPaymentIdentifierReferenceNumbersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetPaymentIdentifierReferenceNumbersResponse getPaymentIdentifierReferenceNumbers(String paymentIdentifier) throws ApiException {
        ApiResponse<GetPaymentIdentifierReferenceNumbersResponse> resp = getPaymentIdentifierReferenceNumbersWithHttpInfo(paymentIdentifier);
        return resp.getData();
    }

    /**
     * Pobranie listy faktur dla identyfikatora płatności
     * Pobranie listy faktur dla identyfikatora płatności
     * @param paymentIdentifier  (required)
     * @return ApiResponse&lt;GetPaymentIdentifierReferenceNumbersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetPaymentIdentifierReferenceNumbersResponse> getPaymentIdentifierReferenceNumbersWithHttpInfo(String paymentIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getPaymentIdentifierReferenceNumbersValidateBeforeCall(paymentIdentifier, null, null);
        Type localVarReturnType = new TypeToken<GetPaymentIdentifierReferenceNumbersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Pobranie listy faktur dla identyfikatora płatności (asynchronously)
     * Pobranie listy faktur dla identyfikatora płatności
     * @param paymentIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPaymentIdentifierReferenceNumbersAsync(String paymentIdentifier, final ApiCallback<GetPaymentIdentifierReferenceNumbersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPaymentIdentifierReferenceNumbersValidateBeforeCall(paymentIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetPaymentIdentifierReferenceNumbersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for requestPaymentIdentifier
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call requestPaymentIdentifierCall(RequestPaymentIdentifierRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/online/Payment/Identifier/Request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SessionToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call requestPaymentIdentifierValidateBeforeCall(RequestPaymentIdentifierRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling requestPaymentIdentifier(Async)");
        }

        com.squareup.okhttp.Call call = requestPaymentIdentifierCall(body, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Wygenerowanie identyfikatora płatności
     * Wygenerowanie identyfikatora płatności
     * @param body  (required)
     * @return RequestPaymentIdentifierResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RequestPaymentIdentifierResponse requestPaymentIdentifier(RequestPaymentIdentifierRequest body) throws ApiException {
        ApiResponse<RequestPaymentIdentifierResponse> resp = requestPaymentIdentifierWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Wygenerowanie identyfikatora płatności
     * Wygenerowanie identyfikatora płatności
     * @param body  (required)
     * @return ApiResponse&lt;RequestPaymentIdentifierResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RequestPaymentIdentifierResponse> requestPaymentIdentifierWithHttpInfo(RequestPaymentIdentifierRequest body) throws ApiException {
        com.squareup.okhttp.Call call = requestPaymentIdentifierValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<RequestPaymentIdentifierResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Wygenerowanie identyfikatora płatności (asynchronously)
     * Wygenerowanie identyfikatora płatności
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call requestPaymentIdentifierAsync(RequestPaymentIdentifierRequest body, final ApiCallback<RequestPaymentIdentifierResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = requestPaymentIdentifierValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RequestPaymentIdentifierResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
