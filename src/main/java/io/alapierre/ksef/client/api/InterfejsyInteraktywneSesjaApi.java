/*
 * KSeF
 * Krajowy Systemu e-Faktur
 *
 * OpenAPI spec version: 0.0.2
 * Contact: info.ksef@mf.gov.pl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.alapierre.ksef.client.api;

import io.alapierre.ksef.client.model.AuthorisationChallengeResponse;
import io.alapierre.ksef.client.model.InitSessionResponse;
import io.alapierre.ksef.client.model.SessionStatusResponse;
import io.alapierre.ksef.client.model.TerminateSessionResponse;
import io.alapierre.ksef.client.ApiCallback;
import io.alapierre.ksef.client.ApiClient;
import io.alapierre.ksef.client.ApiException;
import io.alapierre.ksef.client.ApiResponse;
import io.alapierre.ksef.client.Configuration;
import io.alapierre.ksef.client.Pair;
import io.alapierre.ksef.client.ProgressRequestBody;
import io.alapierre.ksef.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.alapierre.ksef.client.model.AuthorisationChallengeRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InterfejsyInteraktywneSesjaApi {
    private ApiClient apiClient;

    public InterfejsyInteraktywneSesjaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InterfejsyInteraktywneSesjaApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for authorisationChallenge
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authorisationChallengeCall(AuthorisationChallengeRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/online/Session/AuthorisationChallenge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authorisationChallengeValidateBeforeCall(AuthorisationChallengeRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling authorisationChallenge(Async)");
        }

        com.squareup.okhttp.Call call = authorisationChallengeCall(body, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Inicjalizacja mechanizmu uwierzytelnienia i autoryzacji
     * Inicjalizacja mechanizmu uwierzytelnienia i autoryzacji.
     * @param body  (required)
     * @return AuthorisationChallengeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthorisationChallengeResponse authorisationChallenge(AuthorisationChallengeRequest body) throws ApiException {
        ApiResponse<AuthorisationChallengeResponse> resp = authorisationChallengeWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Inicjalizacja mechanizmu uwierzytelnienia i autoryzacji
     * Inicjalizacja mechanizmu uwierzytelnienia i autoryzacji.
     * @param body  (required)
     * @return ApiResponse&lt;AuthorisationChallengeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthorisationChallengeResponse> authorisationChallengeWithHttpInfo(AuthorisationChallengeRequest body) throws ApiException {
        com.squareup.okhttp.Call call = authorisationChallengeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<AuthorisationChallengeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Inicjalizacja mechanizmu uwierzytelnienia i autoryzacji (asynchronously)
     * Inicjalizacja mechanizmu uwierzytelnienia i autoryzacji.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authorisationChallengeAsync(AuthorisationChallengeRequest body, final ApiCallback<AuthorisationChallengeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authorisationChallengeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthorisationChallengeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for initSessionSigned
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Przykład żądania
     * @see <a href="document/InitSessionSignedRequestExample/1.0">Inicjalizacja sesji, wskazanie kontekstu, uwierzytelnienie i autoryzacja Documentation</a>
     */
    public com.squareup.okhttp.Call initSessionSignedCall(Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/online/Session/InitSigned";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call initSessionSignedValidateBeforeCall(Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling initSessionSigned(Async)");
        }

        com.squareup.okhttp.Call call = initSessionSignedCall(body, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Inicjalizacja sesji, wskazanie kontekstu, uwierzytelnienie i autoryzacja
     * Inicjalizacja sesji interaktywnej. Podpisany dokument http://ksef.mf.gov.pl/schema/gtw/svc/online/auth/request/2021/10/01/0001/InitSessionSignedRequest
     * @param body  (required)
     * @return InitSessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Przykład żądania
     * @see <a href="document/InitSessionSignedRequestExample/1.0">Inicjalizacja sesji, wskazanie kontekstu, uwierzytelnienie i autoryzacja Documentation</a>
     */
    public InitSessionResponse initSessionSigned(Object body) throws ApiException {
        ApiResponse<InitSessionResponse> resp = initSessionSignedWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Inicjalizacja sesji, wskazanie kontekstu, uwierzytelnienie i autoryzacja
     * Inicjalizacja sesji interaktywnej. Podpisany dokument http://ksef.mf.gov.pl/schema/gtw/svc/online/auth/request/2021/10/01/0001/InitSessionSignedRequest
     * @param body  (required)
     * @return ApiResponse&lt;InitSessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Przykład żądania
     * @see <a href="document/InitSessionSignedRequestExample/1.0">Inicjalizacja sesji, wskazanie kontekstu, uwierzytelnienie i autoryzacja Documentation</a>
     */
    public ApiResponse<InitSessionResponse> initSessionSignedWithHttpInfo(Object body) throws ApiException {
        com.squareup.okhttp.Call call = initSessionSignedValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<InitSessionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Inicjalizacja sesji, wskazanie kontekstu, uwierzytelnienie i autoryzacja (asynchronously)
     * Inicjalizacja sesji interaktywnej. Podpisany dokument http://ksef.mf.gov.pl/schema/gtw/svc/online/auth/request/2021/10/01/0001/InitSessionSignedRequest
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Przykład żądania
     * @see <a href="document/InitSessionSignedRequestExample/1.0">Inicjalizacja sesji, wskazanie kontekstu, uwierzytelnienie i autoryzacja Documentation</a>
     */
    public com.squareup.okhttp.Call initSessionSignedAsync(Object body, final ApiCallback<InitSessionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = initSessionSignedValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InitSessionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for initSessionToken
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Przykład żądania
     * @see <a href="document/InitSessionTokenRequestExample/1.0">Inicjalizacja sesji, wskazanie kontekstu, uwierzytelnienie i autoryzacja Documentation</a>
     */
    public com.squareup.okhttp.Call initSessionTokenCall(Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/online/Session/InitToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call initSessionTokenValidateBeforeCall(Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling initSessionToken(Async)");
        }

        com.squareup.okhttp.Call call = initSessionTokenCall(body, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Inicjalizacja sesji, wskazanie kontekstu, uwierzytelnienie i autoryzacja
     * Inicjalizacja sesji interaktywnej. Zaszyfrowany kluczem publicznym KSeF dokument http://ksef.mf.gov.pl/schema/gtw/svc/online/auth/request/2021/10/01/0001/InitSessionTokenRequest
     * @param body  (required)
     * @return InitSessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Przykład żądania
     * @see <a href="document/InitSessionTokenRequestExample/1.0">Inicjalizacja sesji, wskazanie kontekstu, uwierzytelnienie i autoryzacja Documentation</a>
     */
    public InitSessionResponse initSessionToken(Object body) throws ApiException {
        ApiResponse<InitSessionResponse> resp = initSessionTokenWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Inicjalizacja sesji, wskazanie kontekstu, uwierzytelnienie i autoryzacja
     * Inicjalizacja sesji interaktywnej. Zaszyfrowany kluczem publicznym KSeF dokument http://ksef.mf.gov.pl/schema/gtw/svc/online/auth/request/2021/10/01/0001/InitSessionTokenRequest
     * @param body  (required)
     * @return ApiResponse&lt;InitSessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Przykład żądania
     * @see <a href="document/InitSessionTokenRequestExample/1.0">Inicjalizacja sesji, wskazanie kontekstu, uwierzytelnienie i autoryzacja Documentation</a>
     */
    public ApiResponse<InitSessionResponse> initSessionTokenWithHttpInfo(Object body) throws ApiException {
        com.squareup.okhttp.Call call = initSessionTokenValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<InitSessionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Inicjalizacja sesji, wskazanie kontekstu, uwierzytelnienie i autoryzacja (asynchronously)
     * Inicjalizacja sesji interaktywnej. Zaszyfrowany kluczem publicznym KSeF dokument http://ksef.mf.gov.pl/schema/gtw/svc/online/auth/request/2021/10/01/0001/InitSessionTokenRequest
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Przykład żądania
     * @see <a href="document/InitSessionTokenRequestExample/1.0">Inicjalizacja sesji, wskazanie kontekstu, uwierzytelnienie i autoryzacja Documentation</a>
     */
    public com.squareup.okhttp.Call initSessionTokenAsync(Object body, final ApiCallback<InitSessionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = initSessionTokenValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InitSessionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sessionStatusPlain
     * @param pageSize  (required)
     * @param pageOffset  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sessionStatusPlainCall(Integer pageSize, Integer pageOffset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/online/Session/Status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PageSize", pageSize));
        if (pageOffset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PageOffset", pageOffset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SessionToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sessionStatusPlainValidateBeforeCall(Integer pageSize, Integer pageOffset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling sessionStatusPlain(Async)");
        }
        // verify the required parameter 'pageOffset' is set
        if (pageOffset == null) {
            throw new ApiException("Missing the required parameter 'pageOffset' when calling sessionStatusPlain(Async)");
        }

        com.squareup.okhttp.Call call = sessionStatusPlainCall(pageSize, pageOffset, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Sprawdzenie statusu aktywnej sesji interaktywnej
     * Sprawdzenie statusu obecnego przetwarzania interaktywnego
     * @param pageSize  (required)
     * @param pageOffset  (required)
     * @return SessionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SessionStatusResponse sessionStatusPlain(Integer pageSize, Integer pageOffset) throws ApiException {
        ApiResponse<SessionStatusResponse> resp = sessionStatusPlainWithHttpInfo(pageSize, pageOffset);
        return resp.getData();
    }

    /**
     * Sprawdzenie statusu aktywnej sesji interaktywnej
     * Sprawdzenie statusu obecnego przetwarzania interaktywnego
     * @param pageSize  (required)
     * @param pageOffset  (required)
     * @return ApiResponse&lt;SessionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SessionStatusResponse> sessionStatusPlainWithHttpInfo(Integer pageSize, Integer pageOffset) throws ApiException {
        com.squareup.okhttp.Call call = sessionStatusPlainValidateBeforeCall(pageSize, pageOffset, null, null);
        Type localVarReturnType = new TypeToken<SessionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sprawdzenie statusu aktywnej sesji interaktywnej (asynchronously)
     * Sprawdzenie statusu obecnego przetwarzania interaktywnego
     * @param pageSize  (required)
     * @param pageOffset  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sessionStatusPlainAsync(Integer pageSize, Integer pageOffset, final ApiCallback<SessionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sessionStatusPlainValidateBeforeCall(pageSize, pageOffset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SessionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sessionStatusReferenceNumber
     * @param referenceNumber  (required)
     * @param pageSize  (required)
     * @param pageOffset  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sessionStatusReferenceNumberCall(String referenceNumber, Integer pageSize, Integer pageOffset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/online/Session/Status/{ReferenceNumber}"
            .replaceAll("\\{" + "ReferenceNumber" + "\\}", apiClient.escapeString(referenceNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PageSize", pageSize));
        if (pageOffset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PageOffset", pageOffset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SessionToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sessionStatusReferenceNumberValidateBeforeCall(String referenceNumber, Integer pageSize, Integer pageOffset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'referenceNumber' is set
        if (referenceNumber == null) {
            throw new ApiException("Missing the required parameter 'referenceNumber' when calling sessionStatusReferenceNumber(Async)");
        }
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling sessionStatusReferenceNumber(Async)");
        }
        // verify the required parameter 'pageOffset' is set
        if (pageOffset == null) {
            throw new ApiException("Missing the required parameter 'pageOffset' when calling sessionStatusReferenceNumber(Async)");
        }

        com.squareup.okhttp.Call call = sessionStatusReferenceNumberCall(referenceNumber, pageSize, pageOffset, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Sprawdzenie statusu sesji ogólnej
     * Sprawdzenie statusu przetwarzania na podstawie numeru referencyjnego
     * @param referenceNumber  (required)
     * @param pageSize  (required)
     * @param pageOffset  (required)
     * @return SessionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SessionStatusResponse sessionStatusReferenceNumber(String referenceNumber, Integer pageSize, Integer pageOffset) throws ApiException {
        ApiResponse<SessionStatusResponse> resp = sessionStatusReferenceNumberWithHttpInfo(referenceNumber, pageSize, pageOffset);
        return resp.getData();
    }

    /**
     * Sprawdzenie statusu sesji ogólnej
     * Sprawdzenie statusu przetwarzania na podstawie numeru referencyjnego
     * @param referenceNumber  (required)
     * @param pageSize  (required)
     * @param pageOffset  (required)
     * @return ApiResponse&lt;SessionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SessionStatusResponse> sessionStatusReferenceNumberWithHttpInfo(String referenceNumber, Integer pageSize, Integer pageOffset) throws ApiException {
        com.squareup.okhttp.Call call = sessionStatusReferenceNumberValidateBeforeCall(referenceNumber, pageSize, pageOffset, null, null);
        Type localVarReturnType = new TypeToken<SessionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sprawdzenie statusu sesji ogólnej (asynchronously)
     * Sprawdzenie statusu przetwarzania na podstawie numeru referencyjnego
     * @param referenceNumber  (required)
     * @param pageSize  (required)
     * @param pageOffset  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sessionStatusReferenceNumberAsync(String referenceNumber, Integer pageSize, Integer pageOffset, final ApiCallback<SessionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sessionStatusReferenceNumberValidateBeforeCall(referenceNumber, pageSize, pageOffset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SessionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for terminateSession
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call terminateSessionCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/online/Session/Terminate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SessionToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call terminateSessionValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = terminateSessionCall(progressListener, progressRequestListener);
        return call;





    }

    /**
     * Wymuszenie zamknięcia sesji
     * Wymuszenie zamknięcia sesji interaktywnej
     * @return TerminateSessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TerminateSessionResponse terminateSession() throws ApiException {
        ApiResponse<TerminateSessionResponse> resp = terminateSessionWithHttpInfo();
        return resp.getData();
    }

    /**
     * Wymuszenie zamknięcia sesji
     * Wymuszenie zamknięcia sesji interaktywnej
     * @return ApiResponse&lt;TerminateSessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TerminateSessionResponse> terminateSessionWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = terminateSessionValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TerminateSessionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Wymuszenie zamknięcia sesji (asynchronously)
     * Wymuszenie zamknięcia sesji interaktywnej
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call terminateSessionAsync(final ApiCallback<TerminateSessionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = terminateSessionValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TerminateSessionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
