/*
 * KSeF
 * Krajowy Systemu e-Faktur
 *
 * OpenAPI spec version: 0.0.2
 * Contact: info.ksef@mf.gov.pl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.alapierre.ksef.client.api;

import io.alapierre.ksef.client.ApiCallback;
import io.alapierre.ksef.client.ApiClient;
import io.alapierre.ksef.client.ApiException;
import io.alapierre.ksef.client.ApiResponse;
import io.alapierre.ksef.client.Configuration;
import io.alapierre.ksef.client.Pair;
import io.alapierre.ksef.client.ProgressRequestBody;
import io.alapierre.ksef.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.alapierre.ksef.client.model.QueryInvoiceAsyncInitResponse;
import io.alapierre.ksef.client.model.QueryInvoiceAsyncStatusResponse;
import io.alapierre.ksef.client.model.QueryInvoiceRequest;
import io.alapierre.ksef.client.model.QueryInvoiceSyncResponse;
import io.alapierre.ksef.client.model.QuerySyncCredentialsRequest;
import io.alapierre.ksef.client.model.QuerySyncCredentialsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InterfejsyInteraktywneZapytaniaApi {
    private ApiClient apiClient;

    public InterfejsyInteraktywneZapytaniaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InterfejsyInteraktywneZapytaniaApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for queryCredentialsSync
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryCredentialsSyncCall(QuerySyncCredentialsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/online/Query/Credential/Sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SessionToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryCredentialsSyncValidateBeforeCall(QuerySyncCredentialsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling queryCredentialsSync(Async)");
        }

        com.squareup.okhttp.Call call = queryCredentialsSyncCall(body, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Zapytanie o poświadczenia
     * Zapytanie o poświadczenia
     * @param body  (required)
     * @return QuerySyncCredentialsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuerySyncCredentialsResponse queryCredentialsSync(QuerySyncCredentialsRequest body) throws ApiException {
        ApiResponse<QuerySyncCredentialsResponse> resp = queryCredentialsSyncWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Zapytanie o poświadczenia
     * Zapytanie o poświadczenia
     * @param body  (required)
     * @return ApiResponse&lt;QuerySyncCredentialsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuerySyncCredentialsResponse> queryCredentialsSyncWithHttpInfo(QuerySyncCredentialsRequest body) throws ApiException {
        com.squareup.okhttp.Call call = queryCredentialsSyncValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<QuerySyncCredentialsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Zapytanie o poświadczenia (asynchronously)
     * Zapytanie o poświadczenia
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryCredentialsSyncAsync(QuerySyncCredentialsRequest body, final ApiCallback<QuerySyncCredentialsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryCredentialsSyncValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuerySyncCredentialsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryInvoiceAsyncFetch
     * @param queryElementReferenceNumber  (required)
     * @param partElementReferenceNumber  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryInvoiceAsyncFetchCall(String queryElementReferenceNumber, String partElementReferenceNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/online/Query/Invoice/Async/Fetch/{QueryElementReferenceNumber}/{PartElementReferenceNumber}"
            .replaceAll("\\{" + "QueryElementReferenceNumber" + "\\}", apiClient.escapeString(queryElementReferenceNumber.toString()))
            .replaceAll("\\{" + "PartElementReferenceNumber" + "\\}", apiClient.escapeString(partElementReferenceNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SessionToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryInvoiceAsyncFetchValidateBeforeCall(String queryElementReferenceNumber, String partElementReferenceNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'queryElementReferenceNumber' is set
        if (queryElementReferenceNumber == null) {
            throw new ApiException("Missing the required parameter 'queryElementReferenceNumber' when calling queryInvoiceAsyncFetch(Async)");
        }
        // verify the required parameter 'partElementReferenceNumber' is set
        if (partElementReferenceNumber == null) {
            throw new ApiException("Missing the required parameter 'partElementReferenceNumber' when calling queryInvoiceAsyncFetch(Async)");
        }

        com.squareup.okhttp.Call call = queryInvoiceAsyncFetchCall(queryElementReferenceNumber, partElementReferenceNumber, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Pobranie wyników zapytania o faktury
     * Pobranie wyników zapytania o faktury
     * @param queryElementReferenceNumber  (required)
     * @param partElementReferenceNumber  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object queryInvoiceAsyncFetch(String queryElementReferenceNumber, String partElementReferenceNumber) throws ApiException {
        ApiResponse<Object> resp = queryInvoiceAsyncFetchWithHttpInfo(queryElementReferenceNumber, partElementReferenceNumber);
        return resp.getData();
    }

    /**
     * Pobranie wyników zapytania o faktury
     * Pobranie wyników zapytania o faktury
     * @param queryElementReferenceNumber  (required)
     * @param partElementReferenceNumber  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> queryInvoiceAsyncFetchWithHttpInfo(String queryElementReferenceNumber, String partElementReferenceNumber) throws ApiException {
        com.squareup.okhttp.Call call = queryInvoiceAsyncFetchValidateBeforeCall(queryElementReferenceNumber, partElementReferenceNumber, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Pobranie wyników zapytania o faktury (asynchronously)
     * Pobranie wyników zapytania o faktury
     * @param queryElementReferenceNumber  (required)
     * @param partElementReferenceNumber  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryInvoiceAsyncFetchAsync(String queryElementReferenceNumber, String partElementReferenceNumber, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryInvoiceAsyncFetchValidateBeforeCall(queryElementReferenceNumber, partElementReferenceNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryInvoiceAsyncInit
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryInvoiceAsyncInitCall(QueryInvoiceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/online/Query/Invoice/Async/Init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SessionToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryInvoiceAsyncInitValidateBeforeCall(QueryInvoiceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling queryInvoiceAsyncInit(Async)");
        }

        com.squareup.okhttp.Call call = queryInvoiceAsyncInitCall(body, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Inicjalizacja zapytania o faktury
     * Inicjalizacja zapytania o faktury
     * @param body  (required)
     * @return QueryInvoiceAsyncInitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueryInvoiceAsyncInitResponse queryInvoiceAsyncInit(QueryInvoiceRequest body) throws ApiException {
        ApiResponse<QueryInvoiceAsyncInitResponse> resp = queryInvoiceAsyncInitWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Inicjalizacja zapytania o faktury
     * Inicjalizacja zapytania o faktury
     * @param body  (required)
     * @return ApiResponse&lt;QueryInvoiceAsyncInitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueryInvoiceAsyncInitResponse> queryInvoiceAsyncInitWithHttpInfo(QueryInvoiceRequest body) throws ApiException {
        com.squareup.okhttp.Call call = queryInvoiceAsyncInitValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<QueryInvoiceAsyncInitResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Inicjalizacja zapytania o faktury (asynchronously)
     * Inicjalizacja zapytania o faktury
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryInvoiceAsyncInitAsync(QueryInvoiceRequest body, final ApiCallback<QueryInvoiceAsyncInitResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryInvoiceAsyncInitValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueryInvoiceAsyncInitResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryInvoiceAsyncStatus
     * @param queryElementReferenceNumber  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryInvoiceAsyncStatusCall(String queryElementReferenceNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/online/Query/Invoice/Async/Status/{QueryElementReferenceNumber}"
            .replaceAll("\\{" + "QueryElementReferenceNumber" + "\\}", apiClient.escapeString(queryElementReferenceNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SessionToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryInvoiceAsyncStatusValidateBeforeCall(String queryElementReferenceNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'queryElementReferenceNumber' is set
        if (queryElementReferenceNumber == null) {
            throw new ApiException("Missing the required parameter 'queryElementReferenceNumber' when calling queryInvoiceAsyncStatus(Async)");
        }

        com.squareup.okhttp.Call call = queryInvoiceAsyncStatusCall(queryElementReferenceNumber, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Sprawdzenie statusu zapytania o faktury
     * Sprawdzenie statusu zapytania o faktury
     * @param queryElementReferenceNumber  (required)
     * @return QueryInvoiceAsyncStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueryInvoiceAsyncStatusResponse queryInvoiceAsyncStatus(String queryElementReferenceNumber) throws ApiException {
        ApiResponse<QueryInvoiceAsyncStatusResponse> resp = queryInvoiceAsyncStatusWithHttpInfo(queryElementReferenceNumber);
        return resp.getData();
    }

    /**
     * Sprawdzenie statusu zapytania o faktury
     * Sprawdzenie statusu zapytania o faktury
     * @param queryElementReferenceNumber  (required)
     * @return ApiResponse&lt;QueryInvoiceAsyncStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueryInvoiceAsyncStatusResponse> queryInvoiceAsyncStatusWithHttpInfo(String queryElementReferenceNumber) throws ApiException {
        com.squareup.okhttp.Call call = queryInvoiceAsyncStatusValidateBeforeCall(queryElementReferenceNumber, null, null);
        Type localVarReturnType = new TypeToken<QueryInvoiceAsyncStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sprawdzenie statusu zapytania o faktury (asynchronously)
     * Sprawdzenie statusu zapytania o faktury
     * @param queryElementReferenceNumber  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryInvoiceAsyncStatusAsync(String queryElementReferenceNumber, final ApiCallback<QueryInvoiceAsyncStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryInvoiceAsyncStatusValidateBeforeCall(queryElementReferenceNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueryInvoiceAsyncStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryInvoiceSync
     * @param body  (required)
     * @param pageSize  (required)
     * @param pageOffset  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryInvoiceSyncCall(QueryInvoiceRequest body, Integer pageSize, Integer pageOffset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/online/Query/Invoice/Sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PageSize", pageSize));
        if (pageOffset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PageOffset", pageOffset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SessionToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryInvoiceSyncValidateBeforeCall(QueryInvoiceRequest body, Integer pageSize, Integer pageOffset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling queryInvoiceSync(Async)");
        }
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling queryInvoiceSync(Async)");
        }
        // verify the required parameter 'pageOffset' is set
        if (pageOffset == null) {
            throw new ApiException("Missing the required parameter 'pageOffset' when calling queryInvoiceSync(Async)");
        }

        com.squareup.okhttp.Call call = queryInvoiceSyncCall(body, pageSize, pageOffset, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Zapytanie o faktury
     * Zapytanie o faktury
     * @param body  (required)
     * @param pageSize  (required)
     * @param pageOffset  (required)
     * @return QueryInvoiceSyncResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueryInvoiceSyncResponse queryInvoiceSync(QueryInvoiceRequest body, Integer pageSize, Integer pageOffset) throws ApiException {
        ApiResponse<QueryInvoiceSyncResponse> resp = queryInvoiceSyncWithHttpInfo(body, pageSize, pageOffset);
        return resp.getData();
    }

    /**
     * Zapytanie o faktury
     * Zapytanie o faktury
     * @param body  (required)
     * @param pageSize  (required)
     * @param pageOffset  (required)
     * @return ApiResponse&lt;QueryInvoiceSyncResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueryInvoiceSyncResponse> queryInvoiceSyncWithHttpInfo(QueryInvoiceRequest body, Integer pageSize, Integer pageOffset) throws ApiException {
        com.squareup.okhttp.Call call = queryInvoiceSyncValidateBeforeCall(body, pageSize, pageOffset, null, null);
        Type localVarReturnType = new TypeToken<QueryInvoiceSyncResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Zapytanie o faktury (asynchronously)
     * Zapytanie o faktury
     * @param body  (required)
     * @param pageSize  (required)
     * @param pageOffset  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryInvoiceSyncAsync(QueryInvoiceRequest body, Integer pageSize, Integer pageOffset, final ApiCallback<QueryInvoiceSyncResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryInvoiceSyncValidateBeforeCall(body, pageSize, pageOffset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueryInvoiceSyncResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
