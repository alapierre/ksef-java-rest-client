/*
 * KSeF
 * Krajowy Systemu e-Faktur
 *
 * OpenAPI spec version: 0.0.2
 * Contact: info.ksef@mf.gov.pl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.alapierre.ksef.client;

import com.google.gson.*;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.alapierre.ksef.client.model.*;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.PostProcessor;
import io.gsonfire.TypeSelector;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.format.DateTimeFormatter;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

public class JSON {
    private Gson gson;
    private boolean isLenientOnJson = false;
    private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();

    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
          .registerTypeSelector(CredentialsIdentifierRequestType.class, new TypeSelector<CredentialsIdentifierRequestType>() {
            @Override
            public Class<? extends CredentialsIdentifierRequestType> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends CredentialsIdentifierRequestType>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("nip".toUpperCase(), CredentialsIdentifierRequestIndividualNipType.class);
                    classByDiscriminatorValue.put("pesel".toUpperCase(), CredentialsIdentifierRequestIndividualPeselType.class);
                    classByDiscriminatorValue.put("fingerprint".toUpperCase(), CredentialsIdentifierRequestIndividualCertificateFingerprintType.class);
                    classByDiscriminatorValue.put("onip".toUpperCase(), CredentialsIdentifierRequestInstitutionalNipType.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "identifierType"));
            }
          })
          .registerPostProcessor(CredentialsIdentifierRequestType.class, new PostProcessor<CredentialsIdentifierRequestType>() {
              @Override
              public void postDeserialize(CredentialsIdentifierRequestType result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, CredentialsIdentifierRequestType src, Gson gson) {
                  Map<Class<? extends CredentialsIdentifierRequestType>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(CredentialsIdentifierRequestIndividualNipType.class, "nip");
                      discriminatorValueByClass.put(CredentialsIdentifierRequestIndividualPeselType.class, "pesel");
                      discriminatorValueByClass.put(CredentialsIdentifierRequestIndividualCertificateFingerprintType.class, "fingerprint");
                      discriminatorValueByClass.put(CredentialsIdentifierRequestInstitutionalNipType.class, "onip");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("identifierType"))
                      {
                          ((JsonObject) result).addProperty("identifierType", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(CredentialsIdentifierResponseType.class, new TypeSelector<CredentialsIdentifierResponseType>() {
            @Override
            public Class<? extends CredentialsIdentifierResponseType> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends CredentialsIdentifierResponseType>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("system".toUpperCase(), CredentialsIdentifierResponseSystemType.class);
                    classByDiscriminatorValue.put("nip".toUpperCase(), CredentialsIdentifierResponseIndividualNipType.class);
                    classByDiscriminatorValue.put("pesel".toUpperCase(), CredentialsIdentifierResponseIndividualPeselType.class);
                    classByDiscriminatorValue.put("fingerprint".toUpperCase(), CredentialsIdentifierResponseIndividualCertificateFingerprintType.class);
                    classByDiscriminatorValue.put("onip".toUpperCase(), CredentialsIdentifierResponseInstitutionalNipType.class);
                    classByDiscriminatorValue.put("token".toUpperCase(), CredentialsIdentifierResponseAuthorisationTokenType.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "identifierType"));
            }
          })
          .registerPostProcessor(CredentialsIdentifierResponseType.class, new PostProcessor<CredentialsIdentifierResponseType>() {
              @Override
              public void postDeserialize(CredentialsIdentifierResponseType result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, CredentialsIdentifierResponseType src, Gson gson) {
                  Map<Class<? extends CredentialsIdentifierResponseType>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(CredentialsIdentifierResponseSystemType.class, "system");
                      discriminatorValueByClass.put(CredentialsIdentifierResponseIndividualNipType.class, "nip");
                      discriminatorValueByClass.put(CredentialsIdentifierResponseIndividualPeselType.class, "pesel");
                      discriminatorValueByClass.put(CredentialsIdentifierResponseIndividualCertificateFingerprintType.class, "fingerprint");
                      discriminatorValueByClass.put(CredentialsIdentifierResponseInstitutionalNipType.class, "onip");
                      discriminatorValueByClass.put(CredentialsIdentifierResponseAuthorisationTokenType.class, "token");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("identifierType"))
                      {
                          ((JsonObject) result).addProperty("identifierType", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(InvoicePayloadType.class, new TypeSelector<InvoicePayloadType>() {
            @Override
            public Class<? extends InvoicePayloadType> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends InvoicePayloadType>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("plain".toUpperCase(), InvoicePayloadPlainType.class);
                    classByDiscriminatorValue.put("encrypted".toUpperCase(), InvoicePayloadEncryptedType.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "payloadType"));
            }
          })
          .registerPostProcessor(InvoicePayloadType.class, new PostProcessor<InvoicePayloadType>() {
              @Override
              public void postDeserialize(InvoicePayloadType result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, InvoicePayloadType src, Gson gson) {
                  Map<Class<? extends InvoicePayloadType>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(InvoicePayloadPlainType.class, "plain");
                      discriminatorValueByClass.put(InvoicePayloadEncryptedType.class, "encrypted");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("payloadType"))
                      {
                          ((JsonObject) result).addProperty("payloadType", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(QueryCriteriaCredentialsPlainType.class, new TypeSelector<QueryCriteriaCredentialsPlainType>() {
            @Override
            public Class<? extends QueryCriteriaCredentialsPlainType> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends QueryCriteriaCredentialsPlainType>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("all".toUpperCase(), QueryCriteriaCredentialsAllType.class);
                    classByDiscriminatorValue.put("id".toUpperCase(), QueryCriteriaCredentialsIdType.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "selectorType"));
            }
          })
          .registerPostProcessor(QueryCriteriaCredentialsPlainType.class, new PostProcessor<QueryCriteriaCredentialsPlainType>() {
              @Override
              public void postDeserialize(QueryCriteriaCredentialsPlainType result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, QueryCriteriaCredentialsPlainType src, Gson gson) {
                  Map<Class<? extends QueryCriteriaCredentialsPlainType>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(QueryCriteriaCredentialsAllType.class, "all");
                      discriminatorValueByClass.put(QueryCriteriaCredentialsIdType.class, "id");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("selectorType"))
                      {
                          ((JsonObject) result).addProperty("selectorType", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(QueryCriteriaCredentialsType.class, new TypeSelector<QueryCriteriaCredentialsType>() {
            @Override
            public Class<? extends QueryCriteriaCredentialsType> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends QueryCriteriaCredentialsType>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("tree".toUpperCase(), QueryCriteriaCredentialsIdTreeType.class);
                    classByDiscriminatorValue.put("plain".toUpperCase(), QueryCriteriaCredentialsPlainType.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "structureType"));
            }
          })
          .registerPostProcessor(QueryCriteriaCredentialsType.class, new PostProcessor<QueryCriteriaCredentialsType>() {
              @Override
              public void postDeserialize(QueryCriteriaCredentialsType result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, QueryCriteriaCredentialsType src, Gson gson) {
                  Map<Class<? extends QueryCriteriaCredentialsType>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(QueryCriteriaCredentialsIdTreeType.class, "tree");
                      discriminatorValueByClass.put(QueryCriteriaCredentialsPlainType.class, "plain");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("structureType"))
                      {
                          ((JsonObject) result).addProperty("structureType", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(QueryCriteriaInvoiceType.class, new TypeSelector<QueryCriteriaInvoiceType>() {
            @Override
            public Class<? extends QueryCriteriaInvoiceType> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends QueryCriteriaInvoiceType>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("detail".toUpperCase(), QueryCriteriaInvoiceDetailType.class);
                    classByDiscriminatorValue.put("incremental".toUpperCase(), QueryCriteriaInvoiceIncrementalType.class);
                    classByDiscriminatorValue.put("range".toUpperCase(), QueryCriteriaInvoiceRangeType.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "criteriaType"));
            }
          })
          .registerPostProcessor(QueryCriteriaInvoiceType.class, new PostProcessor<QueryCriteriaInvoiceType>() {
              @Override
              public void postDeserialize(QueryCriteriaInvoiceType result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, QueryCriteriaInvoiceType src, Gson gson) {
                  Map<Class<? extends QueryCriteriaInvoiceType>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(QueryCriteriaInvoiceDetailType.class, "detail");
                      discriminatorValueByClass.put(QueryCriteriaInvoiceIncrementalType.class, "incremental");
                      discriminatorValueByClass.put(QueryCriteriaInvoiceRangeType.class, "range");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("criteriaType"))
                      {
                          ((JsonObject) result).addProperty("criteriaType", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(SubjectNameType.class, new TypeSelector<SubjectNameType>() {
            @Override
            public Class<? extends SubjectNameType> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends SubjectNameType>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("fn".toUpperCase(), SubjectFullNameType.class);
                    classByDiscriminatorValue.put("pn".toUpperCase(), SubjectPersonNameType.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "nameType"));
            }
          })
          .registerPostProcessor(SubjectNameType.class, new PostProcessor<SubjectNameType>() {
              @Override
              public void postDeserialize(SubjectNameType result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, SubjectNameType src, Gson gson) {
                  Map<Class<? extends SubjectNameType>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(SubjectFullNameType.class, "fn");
                      discriminatorValueByClass.put(SubjectPersonNameType.class, "pn");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("nameType"))
                      {
                          ((JsonObject) result).addProperty("nameType", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(SubjectIdentifierByType.class, new TypeSelector<SubjectIdentifierByType>() {
            @Override
            public Class<? extends SubjectIdentifierByType> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends SubjectIdentifierByType>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("onip".toUpperCase(), SubjectIdentifierByCompanyType.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "identifierType"));
            }
          })
          .registerPostProcessor(SubjectIdentifierByType.class, new PostProcessor<SubjectIdentifierByType>() {
              @Override
              public void postDeserialize(SubjectIdentifierByType result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, SubjectIdentifierByType src, Gson gson) {
                  Map<Class<? extends SubjectIdentifierByType>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(SubjectIdentifierByCompanyType.class, "onip");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("identifierType"))
                      {
                          ((JsonObject) result).addProperty("identifierType", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(SubjectIdentifierToType.class, new TypeSelector<SubjectIdentifierToType>() {
            @Override
            public Class<? extends SubjectIdentifierToType> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends SubjectIdentifierToType>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("onip".toUpperCase(), SubjectIdentifierToCompanyType.class);
                    classByDiscriminatorValue.put("other".toUpperCase(), SubjectIdentifierToOtherTaxType.class);
                    classByDiscriminatorValue.put("none".toUpperCase(), SubjectIdentifierToNoneType.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "identifierType"));
            }
          })
          .registerPostProcessor(SubjectIdentifierToType.class, new PostProcessor<SubjectIdentifierToType>() {
              @Override
              public void postDeserialize(SubjectIdentifierToType result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, SubjectIdentifierToType src, Gson gson) {
                  Map<Class<? extends SubjectIdentifierToType>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(SubjectIdentifierToCompanyType.class, "onip");
                      discriminatorValueByClass.put(SubjectIdentifierToOtherTaxType.class, "other");
                      discriminatorValueByClass.put(SubjectIdentifierToNoneType.class, "none");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("identifierType"))
                      {
                          ((JsonObject) result).addProperty("identifierType", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
        ;
        return fireBuilder.createGsonBuilder();
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if(null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    private static <T> Class<? extends T> getClassByDiscriminator(Map<String, Class<? extends T>> classByDiscriminatorValue, String discriminatorValue) {
        Class<? extends T> clazz = classByDiscriminatorValue.get(discriminatorValue.toUpperCase());
        if(null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    public JSON() {
        gson = createGson()
            .registerTypeAdapter(Date.class, dateTypeAdapter)
            .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
            .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)
            .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
            .create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     * @return JSON
     */
    public JSON setGson(Gson gson) {
        this.gson = gson;
        return this;
    }

    public JSON setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
        return this;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class))
                return (T) body;
            else throw (e);
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public JSON setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {
        }

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {
        }

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public JSON setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

}
